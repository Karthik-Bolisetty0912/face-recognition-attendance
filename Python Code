import face_recognition
import cv2
import numpy as np
import os
import pandas as pd
import time
from datetime import datetime
import urllib.request
import dlib
from imutils import face_utils

# Configuration
image_folder = r'C:\Users\Sanju\Downloads\ATTENDANCE\image_folder'
camera_url = 'http://192.168.31.101:81/stream'
attendance_file = 'Attendance.csv'
log_file = 'performance_log.csv'
predictor_path = 'shape_predictor_68_face_landmarks.dat'  # Path to the dlib model

# Initialize dlib's face detector and shape predictor
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor(predictor_path)

# Blink detection constants
EYE_AR_THRESH = 0.21
EYE_AR_CONSEC_FRAMES = 3

def eye_aspect_ratio(eye):
    A = np.linalg.norm(eye[1] - eye[5])
    B = np.linalg.norm(eye[2] - eye[4])
    C = np.linalg.norm(eye[0] - eye[3])
    return (A + B) / (2.0 * C)

# Prepare attendance and performance files
if not os.path.exists(attendance_file):
    pd.DataFrame(columns=["Name", "Time"]).to_csv(attendance_file, index=False)

if not os.path.exists(log_file):
    pd.DataFrame(columns=["Timestamp", "Name", "ResponseTime(s)", "Match"]).to_csv(log_file, index=False)

# Load known faces
images = []
classNames = []
for file in os.listdir(image_folder):
    path = os.path.join(image_folder, file)
    img = cv2.imread(path)
    if img is not None:
        images.append(img)
        classNames.append(os.path.splitext(file)[0])

def findEncodings(images):
    encodeList = []
    for img in images:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        encodes = face_recognition.face_encodings(img)
        if encodes:
            encodeList.append(encodes[0])
    return encodeList

knownEncodings = findEncodings(images)

# Start video stream
print("[INFO] Starting camera stream...")
stream = urllib.request.urlopen(camera_url)
bytes_data = b''
marked_names = set()

true_positives = 0
false_positives = 0
blink_counter = 0
blinked = False

while True:
    start_time = time.time()
    bytes_data += stream.read(1024)
    a = bytes_data.find(b'\xff\xd8')
    b = bytes_data.find(b'\xff\xd9')
    if a != -1 and b != -1:
        jpg = bytes_data[a:b+2]
        bytes_data = bytes_data[b+2:]
        frame = cv2.imdecode(np.frombuffer(jpg, dtype=np.uint8), cv2.IMREAD_COLOR)
        if frame is None:
            continue

        # Resize frame for processing
        small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
        rgb_small = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)

        faces_cur_frame = face_recognition.face_locations(rgb_small)
        encodes_cur_frame = face_recognition.face_encodings(rgb_small, faces_cur_frame)

        # Liveness check
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        rects = detector(gray, 0)
        for rect in rects:
            shape = predictor(gray, rect)
            shape = face_utils.shape_to_np(shape)
            leftEye = shape[36:42]
            rightEye = shape[42:48]
            ear = (eye_aspect_ratio(leftEye) + eye_aspect_ratio(rightEye)) / 2.0

            if ear < EYE_AR_THRESH:
                blink_counter += 1
            else:
                if blink_counter >= EYE_AR_CONSEC_FRAMES:
                    blinked = True
                blink_counter = 0

        for encodeFace, faceLoc in zip(encodes_cur_frame, faces_cur_frame):
            name = "Unknown"
            matched = False

            matches = face_recognition.compare_faces(knownEncodings, encodeFace)
            face_dis = face_recognition.face_distance(knownEncodings, encodeFace)
            matchIndex = np.argmin(face_dis)

            response_time = time.time() - start_time

            if matches[matchIndex] and blinked:
                name = classNames[matchIndex].capitalize()
                matched = True

                if name not in marked_names:
                    time_now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    df = pd.read_csv(attendance_file)
                    df = pd.concat([df, pd.DataFrame([[name, time_now]], columns=["Name", "Time"])], ignore_index=True)
                    df.to_csv(attendance_file, index=False)
                    marked_names.add(name)
                    print(f"[MARKED] {name} at {time_now}")

                true_positives += 1
            else:
                if not blinked:
                    name = "No Blink Detected"
                    print("[WARNING] Spoofing attempt? No blink detected.")
                else:
                    false_positives += 1

            y1, x2, y2, x1 = [v * 4 for v in faceLoc]
            color = (0, 255, 0) if matched else (0, 0, 255)
            cv2.rectangle(frame, (x1, y1), (x2, y2), color, 2)
            cv2.putText(frame, name, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.75, color, 2)

            with open(log_file, 'a') as f:
                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                f.write(f"{timestamp},{name},{response_time:.3f},{matched}\n")

            print(f"[INFO] {name} detected - Response Time: {response_time:.3f}s")

        blinked = False  # Reset for next frame
        cv2.imshow('ESP32-CAM Attendance', frame)
        if cv2.waitKey(1) == 27:  # ESC key
            break

# Summary
total = true_positives + false_positives
accuracy = (true_positives / total) * 100 if total > 0 else 0
print(f"\n[SUMMARY] Accuracy: {accuracy:.2f}% | TP: {true_positives}, FP: {false_positives}")

cv2.destroyAllWindows()

